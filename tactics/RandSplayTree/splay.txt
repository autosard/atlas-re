(match
  (w leaf)
  (ite
    (w{mono} node)
    (ite
      (match
        (let leaf (w{mono} node))
        (ite
          (let node (w{mono} node))
          (ite
            (match
              (w{mono} (let leaf (let node (w{mono} node))))
              (w{l2xy mono}
                (let
                  (tick:defer (shift app))
                  (match
                    (w{mono} leaf)
                    (w{l2xy}
                      (ite
                        (w{mono} (tick:defer (let node (let node node))))
                        (w{mono}       (let node (let node node)))
                      )
                    )
                  )
                )
              )
            )
            (match
              (w{mono} (let leaf (let node (w{mono} node))))
              (w{l2xy mono}
                (let
                  (tick:defer (shift app))
                  (match
                    (w{mono} leaf)
                    (w{l2xy}
                      (ite
                        (w{mono} (tick:defer (let node (let node node))))
                        (w{mono}       (let node (let node node)))
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
      (match
        (let leaf (w{mono} node))
        (ite
          (let node (w{mono} node))
          (ite
            (match
              (w{mono} (let leaf (let node (w{mono} node))))
              (w{l2xy mono}
                (let
                  (tick:defer (shift app))
                  (match
                    (w{mono} leaf)
                    (w{l2xy}
                      (ite
                        (w{mono} (tick:defer (let node (let node node))))
                        (w{mono}       (let node (let node node)))
                      )
                    )
                  )
                )
              )
            )
            (match
              (w{mono} (let node (let leaf (w{mono} node))))
              (w{l2xy mono}
                (let
                  (tick:defer (shift app))
                  (match (w{mono} leaf)
                    (w{l2xy}
                      (ite
                        (w{mono} (tick:defer (let node (let node node))))
                        (w{mono}       (let node (let node node)))
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)
